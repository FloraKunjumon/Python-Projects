import queue
# The grid values must be separated by spaces, e.g.
# 1 1 1 1 1
# 1 0 0 0 1
# 1 0 0 0 1
# 1 1 1 1 1
# Returns a 2D list of 1s and 0s
def readGrid(filename):
    #print('In readGrid')
    grid = []
    with open(filename) as f:
        for l in f.readlines():
            grid.append([int(x) for x in l.split()])
   
    f.close()
    #print 'Exiting readGrid'
    return grid
 
 
# Writes a 2D list of 1s and 0s with spaces in between each character
# 1 1 1 1 1
# 1 0 0 0 1
# 1 0 0 0 1
# 1 1 1 1 1
def outputGrid(grid, start, goal, path):
    #print('In outputGrid')
    filenameStr = 'path.txt'
 
    # Open filename
    f = open(filenameStr, 'w')
 
    # Mark the start and goal points
    grid[start[0]][start[1]] = 'S'
    grid[goal[0]][goal[1]] = 'G'
 
    # Mark intermediate points with *
    for i, p in enumerate(path):
        if i > 0 and i < len(path)-1:
            grid[p[0]][p[1]] = '*'
 
    # Write the grid to a file
    for r, row in enumerate(grid):
        for c, col in enumerate(row):
           
            # Don't add a ' ' at the end of a line
            if c < len(row)-1:
                f.write(str(col)+' ')
            else:
                f.write(str(col))
 
        # Don't add a '\n' after the last line
        if r < len(grid)-1:
            f.write("\n")
 
    # Close file
    f.close()
    #print('Exiting outputGrid')

# The grid values must be separated by spaces, e.g.
# 1 1 1 1 1 
# 1 0 0 0 1
# 1 0 0 0 1
# 1 1 1 1 1
# Returns a 2D list of 1s and 0s
def readGrid(filename):
	#print('In readGrid')
	grid = []
	with open(filename) as f:
		for l in f.readlines():
			grid.append([int(x) for x in l.split()])
	
	f.close()
	#print 'Exiting readGrid'
	return grid


# Writes a 2D list of 1s and 0s with spaces in between each character
# 1 1 1 1 1 
# 1 0 0 0 1
# 1 0 0 0 1
# 1 1 1 1 1
def outputGrid(grid, start, goal, path):
	#print('In outputGrid')
	filenameStr = 'path.txt'

	# Open filename
	f = open(filenameStr, 'w')

	# Mark the start and goal points
	grid[start[0]][start[1]] = 'S'
	grid[goal[0]][goal[1]] = 'G'

	# Mark intermediate points with *
	for i, p in enumerate(path):
		if i > 0 and i < len(path)-1:
			grid[p[0]][p[1]] = '*'

	# Write the grid to a file
	for r, row in enumerate(grid):
		for c, col in enumerate(row):
			
			# Don't add a ' ' at the end of a line
			if c < len(row)-1:
				f.write(str(col)+' ')
			else:
				f.write(str(col))

		# Don't add a '\n' after the last line
		if r < len(grid)-1:
			f.write("\n")

	# Close file
	f.close()
	#print('Exiting outputGrid')
class Node():
    def __init__(self, value, parent):
        self.value = value
        self.parent = parent

def uninformedSearch(grid,start,goal,search):
    print('in uniformedSearch')
    if search == 'BFS':
        current = Node(start, '')
        open = queue.Queue()
        open.put(current)
        closed = []
        while (current.value !=goal) and open.empty() == False:
            print("in while for BFS")
            current = open.get()
            if current.value == goal:
              path = []
              setPath(current, path)
              outputGrid(grid,start,goal,path)
              print("exiting BFS while")
              return
            closed.append(current)
            children = getNeighbors(current.value,grid)
            print("Neighbors: ")
            print(children)
            expandNode(current,open,closed,children,search)
    elif search == 'DFS':
        current = Node(start, '')
        open = []
        open.append(current)
        closed = []
        while (current.value !=goal) and open:
            print("in while for DFS")
            current = open.pop()
            if current.value == goal:
                path = []
                setPath(current, path)
                outputGrid(grid, start, goal, path)
                print("exiting DFS while")
                return
            closed.append(current)
            children = getNeighbors(current.value, grid)
            print("Neighbors:")
            print(children)
            expandNode(current, open, closed, children, search)
    print('exiting')


def getNeighbors(location,grid):
    print("in getNeighbors")
    neighbors = []
    print(location[0])
    x = location[0] + 1
    y = location[1]
    if grid[x][y] == 0:
        neighbors.append([x,y])

    x = location[0] - 1
    y = location[1]
    if grid[x][y] == 0:
        neighbors.append([x,y])

    x = location[0] 
    y = location[1] + 1
    if grid[x][y] == 0:
        neighbors.append([x,y])

    x = location[0] 
    y = location[1] - 1
    if grid[x][y] == 0:
        neighbors.append([x,y])

    print("leaving getNeighbors")
    return neighbors

def expandNode(n,open,closed,children,search):
    print("entering expandNode")
    openNumb = []
    closedNumb = []
    if search == 'BFS':
       for i in open.queue:
           openNumb.append(i.value)
       for l in closed:
           closedNumb.append(l.value)

       print("neighbors being expanded")
       for c in children:
           if c not in openNumb and c not in closedNumb:
               print(c)
               new = Node(c, n)
               open.put(new)
    elif search == 'DFS':
        for i in open:
            openNumb.append(i.value)
        for l in closed:
            closedNumb.append(l.value)
        print("neighbors being expanded")
        for c in children:
            if c not in openNumb and c not in closedNumb:
                print(c)
                new = Node(c, n)
                open.append(new)

    print("leaving expandNode")

def setPath(current,path):
    print("in setPath")

    while current.parent !='':
        path.append(current.parent.value)
        current = current.parent
    print("this is the path it will take")
    print(path)    

def main():
    print("in main")
    grid = readGrid("file1.txt")
    start = [1,1]
    goal = [4,1]
    search = input("would you like to solve BFS or DFS")
    uninformedSearch(grid, start, goal,search)
if __name__ == "__main__":
   main()
